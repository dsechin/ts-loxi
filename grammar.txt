program        → declaration* EOF ;

declaration    → classDecl
               | funDecl
               | varDecl
               | statement ;

classDecl      → "class" IDENTIFIER "{" method* "}" ;
method         → "static"? IDENTIFIER "(" parameters? ")" block ;

funDecl        → "fun" IDENTIFIER "(" parameters? ")" block ;
parameters     → IDENTIFIER ( "," IDENTIFIER )* ;

varDecl        → "var" IDENTIFIER ( "=" expression )? ";" ;
statement      → exprStmt
               | ifStmt
               | printStmt
               | whileStmt
               | forStmt
               | breakStmt
               | returnStmt
               | block ;

returnStmt     → "return" expression? ";" ;

breakStmt      → "break" ";" ;

ifStmt         → "if" "(" expression ")" statement ( "else" statement )? ;

whileStmt      → "while" "(" expression ")" statement ;

forStmt        → "for" "(" ( varDecl | exprStmt | ";" )
                 expression? ";"
                 expression? ")" statement ;

exprStmt       → expression ";" ;
printStmt      → "print" expression ";" ;
block          → "{" declaration* "}" ;

expression     → assignment ;
assignment     → ( call "." )? IDENTIFIER "=" assignment
               | conditional ;
conditional    → logic_or "?" logic_or ":" logic_or
               | logic_or ;

logic_or       → logic_and ( "or" logic_and )* ;
logic_and      → equality ( "and" equality )* ;

equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           → factor ( ( "-" | "+" ) factor )* ;
factor         → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary
               | exponentiation ;

exponentiation → primary ( ** factor )*
               | call;

call           → primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
arguments      → expression ( "," expression )* ;

primary        → NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")"
               | lambda
               | "this"
               | IDENTIFIER ;

lambda         → "fun" IDENTIFIER? "(" parameters? ")" block ;




Name              Operators     Associates
==========================================
assignment        =             Right
Conditional       ? _ : _       Right
Logical or        or            Left
Logical and       and           Left
Equality          == !=         Left
Comparison        > >= < <=     Left
Term              - +           Left
Factor            / *           Left
Unary             ! -           Right
Exponentiation    **            Right